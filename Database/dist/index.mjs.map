{"version":3,"sources":["../src/services/catalog.ts","../src/services/user.ts","../src/prismaClient.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nclass CatalogService {\r\n    async getAllProducts() {\r\n        return await prisma.product.findMany();\r\n    }\r\n\r\n    async createProduct(data: { name: string; description?: string; price: number }) {\r\n        return await prisma.product.create({\r\n            data\r\n        });\r\n    }\r\n\r\n    async getProductById(id: string) {\r\n        // Use string for UUID\r\n        return await prisma.product.findUnique({\r\n            where: { id }\r\n        });\r\n    }\r\n\r\n    async updateProduct(id: string, data: { name?: string; description?: string; price?: number }) {\r\n        return await prisma.product.updateMany({\r\n            where: { id },\r\n            data\r\n        });\r\n    }\r\n\r\n    async deleteProduct(id: string) {\r\n        const deletedProduct = await prisma.product.deleteMany({\r\n            where: { id }\r\n        });\r\n        return deletedProduct.count > 0; // Return true if a product was deleted\r\n    }\r\n}\r\n\r\nexport default new CatalogService();\r\n","import { PrismaClient } from '@prisma/client';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst prisma = new PrismaClient();\r\nconst SALT_ROUNDS = 10;\r\n\r\nclass UserService {\r\n    // Get user by user ID\r\n    async getUserById(id: string) {\r\n        return prisma.user.findUnique({ where: { id } });\r\n    }\r\n\r\n    // Get user by email\r\n    async getUserByEmail(email: string) {\r\n        return prisma.user.findUnique({ where: { email } });\r\n    }\r\n\r\n    // Create a user with an encrypted password\r\n    async createUser(email: string, password: string, name?: string) {\r\n        // const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);\r\n        return prisma.user.create({\r\n            data: { email, password, name }\r\n        });\r\n    }\r\n\r\n    // Get user by Google ID\r\n    async getUserByGoogleId(googleId: string) {\r\n        return prisma.user.findUnique({ where: { googleId } });\r\n    }\r\n\r\n    // Create a user with Google authentication\r\n    async createUserWithGoogle(email: string, googleId: string, name?: string) {\r\n        const hashedPassword = await bcrypt.hash(googleId, SALT_ROUNDS); // Hash googleId as a placeholder\r\n        return prisma.user.create({\r\n            data: { email, googleId, password: hashedPassword, name }\r\n        });\r\n    }\r\n\r\n    // Verify password during login\r\n    async verifyPassword(plainPassword: string, hashedPassword: string) {\r\n        return bcrypt.compare(plainPassword, hashedPassword);\r\n    }\r\n\r\n    // Update user password\r\n    async updatePassword(userId: string, newPassword: string) {\r\n        // const hashedPassword = await bcrypt.hash(newPassword, SALT_ROUNDS);\r\n        return prisma.user.update({\r\n            where: { id: userId },\r\n            data: { password: newPassword }\r\n        });\r\n    }\r\n}\r\n\r\nexport default new UserService();\r\n","import { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport default prisma;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,oBAAoB;AAE7B,IAAM,SAAS,IAAI,aAAa;AAEhC,IAAM,iBAAN,MAAqB;AAAA,EACX,iBAAiB;AAAA;AACnB,aAAO,MAAM,OAAO,QAAQ,SAAS;AAAA,IACzC;AAAA;AAAA,EAEM,cAAc,MAA6D;AAAA;AAC7E,aAAO,MAAM,OAAO,QAAQ,OAAO;AAAA,QAC/B;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA,EAEM,eAAe,IAAY;AAAA;AAE7B,aAAO,MAAM,OAAO,QAAQ,WAAW;AAAA,QACnC,OAAO,EAAE,GAAG;AAAA,MAChB,CAAC;AAAA,IACL;AAAA;AAAA,EAEM,cAAc,IAAY,MAA+D;AAAA;AAC3F,aAAO,MAAM,OAAO,QAAQ,WAAW;AAAA,QACnC,OAAO,EAAE,GAAG;AAAA,QACZ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA,EAEM,cAAc,IAAY;AAAA;AAC5B,YAAM,iBAAiB,MAAM,OAAO,QAAQ,WAAW;AAAA,QACnD,OAAO,EAAE,GAAG;AAAA,MAChB,CAAC;AACD,aAAO,eAAe,QAAQ;AAAA,IAClC;AAAA;AACJ;AAEA,IAAO,kBAAQ,IAAI,eAAe;;;ACrClC,SAAS,gBAAAA,qBAAoB;AAC7B,OAAO,YAAY;AAEnB,IAAMC,UAAS,IAAIC,cAAa;AAChC,IAAM,cAAc;AAEpB,IAAM,cAAN,MAAkB;AAAA;AAAA,EAER,YAAY,IAAY;AAAA;AAC1B,aAAOD,QAAO,KAAK,WAAW,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAAA,IACnD;AAAA;AAAA;AAAA,EAGM,eAAe,OAAe;AAAA;AAChC,aAAOA,QAAO,KAAK,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AAAA,IACtD;AAAA;AAAA;AAAA,EAGM,WAAW,OAAe,UAAkB,MAAe;AAAA;AAE7D,aAAOA,QAAO,KAAK,OAAO;AAAA,QACtB,MAAM,EAAE,OAAO,UAAU,KAAK;AAAA,MAClC,CAAC;AAAA,IACL;AAAA;AAAA;AAAA,EAGM,kBAAkB,UAAkB;AAAA;AACtC,aAAOA,QAAO,KAAK,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AAAA,IACzD;AAAA;AAAA;AAAA,EAGM,qBAAqB,OAAe,UAAkB,MAAe;AAAA;AACvE,YAAM,iBAAiB,MAAM,OAAO,KAAK,UAAU,WAAW;AAC9D,aAAOA,QAAO,KAAK,OAAO;AAAA,QACtB,MAAM,EAAE,OAAO,UAAU,UAAU,gBAAgB,KAAK;AAAA,MAC5D,CAAC;AAAA,IACL;AAAA;AAAA;AAAA,EAGM,eAAe,eAAuB,gBAAwB;AAAA;AAChE,aAAO,OAAO,QAAQ,eAAe,cAAc;AAAA,IACvD;AAAA;AAAA;AAAA,EAGM,eAAe,QAAgB,aAAqB;AAAA;AAEtD,aAAOA,QAAO,KAAK,OAAO;AAAA,QACtB,OAAO,EAAE,IAAI,OAAO;AAAA,QACpB,MAAM,EAAE,UAAU,YAAY;AAAA,MAClC,CAAC;AAAA,IACL;AAAA;AACJ;AAEA,IAAO,eAAQ,IAAI,YAAY;;;ACrD/B,SAAS,gBAAAE,qBAAoB;AAE7B,IAAMC,UAAS,IAAID,cAAa;AAEhC,IAAO,uBAAQC;","names":["PrismaClient","prisma","PrismaClient","PrismaClient","prisma"]}